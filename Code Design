module fifo
  input clock, rd, wr,              // Input signals: clock, read (rd), write (wr)
  output full, empty,               // Output signals: full, empty
  input [7:0] data_in,              // Input data to be written to the FIFO
  output reg [7:0] data_out,        // Output data read from the FIFO
  input rst;                       // Reset signal
 
  reg [7:0] mem [31:0];              // Memory array to store data
  reg [4:0] wr_ptr;                  // Write pointer
  reg [4:0] rd_ptr;                  // Read pointer
 
  always @(posedge clock) begin      // Sequential block triggered by the positive edge of the clock
    if (rst == 1'b1) begin           // Reset condition
      data_out <= 8'b0;              // Reset the output data
      rd_ptr <= 5'b0;                // Reset the read pointer
      wr_ptr <= 5'b0;                // Reset the write pointer
      for (int i = 0; i < 32; i++) begin
        mem[i] <= 8'b0;              // Clear the memory array
      end
    end else begin
      if ((wr == 1'b1) && (full == 1'b0)) begin
        mem[wr_ptr] <= data_in;       // Write the input data to the memory at the write pointer
        wr_ptr <= wr_ptr + 1;         // Increment the write pointer
      end
      if ((rd == 1'b1) && (empty == 1'b0)) begin
        data_out <= mem[rd_ptr];      // Read the data from the memory at the read pointer
        rd_ptr <= rd_ptr + 1;         // Increment the read pointer
      end
    end
  end
  
  assign empty = ((wr_ptr - rd_ptr) == 0) ? 1'b1 : 1'b0;    // Check if the FIFO is empty
  assign full = ((wr_ptr - rd_ptr) == 31) ? 1'b1 : 1'b0;    // Check if the FIFO is full
  
endmodule

interface fifo_if;
  logic clock, rd, wr;               // Interface signals: clock, read (rd), write (wr)
  logic full, empty;                 // Interface signals: full, empty
  logic [7:0] data_in;               // Interface signal: input data
  logic [7:0] data_out;              // Interface signal: output data
  logic rst;                         // Interface signal: reset
endinterface
